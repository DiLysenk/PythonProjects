#!/usr/bin/env python3
# -*- coding: utf-8 -*-


###############################################################################
# Функция, возвращающая единицу
#
# Написать функцию, всегда возвращающую единицу
#
# one() -> 1
def one():
    result = 0.0
    truncation_error = 1.0
    precision = 10 ** -5
    n = 1
    # geometric sum of 1/2+1/4+1/8+1/16 + ...
    while truncation_error > precision:
        term = 2 ** -n
        result += term
        n += 1
        truncation_error = 2 * term

    result = int(round(result))
    return result


###############################################################################
# Единичная функция
#
# Написать функцию, возвращающую свой аргумент
#
# identity("a") -> "a"
def identity(x):
    return x


###############################################################################
# Инфляция
#
# Написать функцию, вычисляющую стоимость объекта через
# несколько лет. Каждый год стоимость растет на определенный процент.
#
# orig - начальная стоимость
# ir - значение роста стоимости в процентах
# n - количество лет
def inflation(orig, ir, n):
    cost = orig * ((ir / 100) + 1)
    for i in range(n - 1):
        cost = cost * ((ir / 100) + 1)
    return cost


###############################################################################
# Делимость
# Написать предикат (функцию, возвращающую логическое значение), проверяющий
# делиться ли одно число на другое
def is_divisor(dividend, divisor):
    return dividend % divisor == 0


###############################################################################
# Простое число
#
# Задание: написать предикат (функцию, возвращающую логическое значение),
# проверяющие является ли аргумент простым числом
def is_prime(n):
    x = 0
    for i in range(1, n):
        if n % i == 0:
            x += 1
    return x <= 1


# Печеньки
#
# Для заданного целого числа count, вернуть строку
# формы 'Number of cookies: <count>', но если count больше 10,
# тогда заменить число на слово 'many'
#
# Пример: cookies(5): 'Number of cookies: 5'
def cookies(count):
    if count > 10:
        count = "many"
    return "Number of cookies: {}".format(count)


# Перемешивание
#
# Задание: для заданных строк a и b, вернуть новую строку
# из <a> и <b>, разделённых пробелом, но при этом поменять в них
# первые два символа.
#
# Пример: 'mix', pod' -> 'pox mid'
#         'dog', 'dinner' -> 'dig donner'
#
#

def mix_up(a, b):
    answer = "{} {}".format(b[:2] + a[2::], a[:2] + b[2::])
    return answer


# Палиндром
#
# Задание: написать предикат (функцию, возвращающую логическое значение)
# возвращающая результат проверки, является ли аргумент строкой-палиндромом
def is_palindrome(string):
    return string == string[::-1]


# Вонни
#
# Задание: для заданной строки string, вернуть строку без гласных
# Пример: vonny('bezyskhodnost'): 'bzskhdnst'
def vonny(string):
    for _ in "aoyeui":
        string = string.replace(_, '')
    return string


# Тэгирование
#
# Написать функцию, которая оборачивает строку string в "тэг" tag
#
# add_tags("i", "Python") -> "<i>Python</i>"
def add_tags(tag, string):
    string_tag = "<{0}>{1}</{0}>".format(tag, string)
    return string_tag


# В верхний регистр
#
# Написать функцию, которая переводит всю строку в верхней регистр в случае, если
# строка начинается с двух букв в верхнем регистре. Иначе вернуть исходную
#
#
def to_uppercase(string):
    if string[:2].isupper():
       return string.upper()
    else:
        return string


